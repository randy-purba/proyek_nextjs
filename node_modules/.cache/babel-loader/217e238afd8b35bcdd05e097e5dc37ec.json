{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { actionTypes } from '../types'; // const API_URL = process.env.API_URL\n\nvar API_DUMMY_URL = process.env.API_DUMMY_URL;\nexport var getListBankQuestion = function getListBankQuestion(page, len, dateFrom, dateTo, sortBy, nameVal) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var from, to, keywords, params, url, responses, headers, total, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                from = dateFrom ? \"&created_date_gte=\".concat(dateFrom) : '';\n                to = dateTo ? \"&created_date_lte=\".concat(dateTo) : '';\n                keywords = nameVal ? \"category_like=\".concat(nameVal, \"&\") : '';\n                params = \"\".concat(keywords, \"_start=\").concat(page * len, \"&_limit=\").concat(len).concat(from).concat(to, \"&_sort=\").concat(sortBy, \"&_order=desc\");\n                url = \"\".concat(API_DUMMY_URL, \"/bankQuestionData?\").concat(params);\n                _context.next = 7;\n                return fetch(url);\n\n              case 7:\n                responses = _context.sent;\n                _context.next = 10;\n                return responses.headers;\n\n              case 10:\n                headers = _context.sent;\n                _context.next = 13;\n                return headers.get('x-total-count');\n\n              case 13:\n                total = _context.sent;\n                dispatch(getTotalListBankQuestion(total));\n                _context.next = 17;\n                return responses.json();\n\n              case 17:\n                data = _context.sent;\n                console.log(data);\n                return _context.abrupt(\"return\", dispatch({\n                  type: actionTypes.LIST_BANK_QUESTION,\n                  payload: data\n                }));\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar getTotalListBankQuestion = function getTotalListBankQuestion(data) {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.TOTAL_BANK_QUESTION,\n      payload: data\n    });\n  };\n};","map":{"version":3,"sources":["/home/tog-randy/Source/BCA/Project/components/actions/ListBankQuestionApi.js"],"names":["fetch","actionTypes","API_DUMMY_URL","process","env","getListBankQuestion","page","len","dateFrom","dateTo","sortBy","nameVal","dispatch","from","to","keywords","params","url","responses","headers","get","total","getTotalListBankQuestion","json","data","console","log","type","LIST_BANK_QUESTION","payload","TOTAL_BANK_QUESTION"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CAEA;;AACA,IAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYF,aAAlC;AAGA,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAOC,GAAP,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAkD,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3EC,gBAAAA,IAD2E,GACpEL,QAAQ,+BAAwBA,QAAxB,IAAqC,EADuB;AAE3EM,gBAAAA,EAF2E,GAEtEL,MAAM,+BAAwBA,MAAxB,IAAmC,EAF6B;AAG3EM,gBAAAA,QAH2E,GAGhEJ,OAAO,2BAAoBA,OAApB,SAAiC,EAHwB;AAI3EK,gBAAAA,MAJ2E,aAI/DD,QAJ+D,oBAI7CT,IAAI,GAACC,GAJwC,qBAI1BA,GAJ0B,SAIpBM,IAJoB,SAIbC,EAJa,oBAIDJ,MAJC;AAK3EO,gBAAAA,GAL2E,aAKlEf,aALkE,+BAKhCc,MALgC;AAAA;AAAA,uBAMzDhB,KAAK,CAACiB,GAAD,CANoD;;AAAA;AAM3EC,gBAAAA,SAN2E;AAAA;AAAA,uBAO3DA,SAAS,CAACC,OAPiD;;AAAA;AAO3EA,gBAAAA,OAP2E;AAAA;AAAA,uBAQ7DA,OAAO,CAACC,GAAR,CAAY,eAAZ,CAR6D;;AAAA;AAQ3EC,gBAAAA,KAR2E;AASjFT,gBAAAA,QAAQ,CAACU,wBAAwB,CAACD,KAAD,CAAzB,CAAR;AATiF;AAAA,uBAU9DH,SAAS,CAACK,IAAV,EAV8D;;AAAA;AAU3EC,gBAAAA,IAV2E;AAWjFC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAXiF,iDAY1EZ,QAAQ,CAAC;AAAEe,kBAAAA,IAAI,EAAE1B,WAAW,CAAC2B,kBAApB;AAAwCC,kBAAAA,OAAO,EAAEL;AAAjD,iBAAD,CAZkE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAeP,IAAMF,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACE,IAAD;AAAA,SAAU,UAACZ,QAAD,EAAc;AACrD,WAAOA,QAAQ,CAAC;AAAEe,MAAAA,IAAI,EAAE1B,WAAW,CAAC6B,mBAApB;AAAyCD,MAAAA,OAAO,EAAEL;AAAlD,KAAD,CAAf;AACH,GAFgC;AAAA,CAAjC","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { actionTypes } from '../types'\n\n// const API_URL = process.env.API_URL\nconst API_DUMMY_URL = process.env.API_DUMMY_URL\n\n\nexport const getListBankQuestion = (page, len, dateFrom, dateTo, sortBy, nameVal) => async (dispatch) => {\n    const from = dateFrom ? `&created_date_gte=${dateFrom}` : ''\n    const to = dateTo ? `&created_date_lte=${dateTo}` : ''\n    const keywords = nameVal ? `category_like=${nameVal}&` : ''\n    const params = `${keywords}_start=${page*len}&_limit=${len}${from}${to}&_sort=${sortBy}&_order=desc`\n    const url = `${API_DUMMY_URL}/bankQuestionData?${params}`\n    const responses = await fetch(url)\n    const headers = await responses.headers\n    const total = await headers.get('x-total-count')\n    dispatch(getTotalListBankQuestion(total))\n    const data = await responses.json()\n    console.log(data);\n    return dispatch({ type: actionTypes.LIST_BANK_QUESTION, payload: data })\n}\n\nconst getTotalListBankQuestion = (data) => (dispatch) => {\n    return dispatch({ type: actionTypes.TOTAL_BANK_QUESTION, payload: data })\n}"]},"metadata":{},"sourceType":"module"}