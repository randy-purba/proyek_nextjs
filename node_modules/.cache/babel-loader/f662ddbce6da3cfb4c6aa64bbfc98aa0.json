{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { actionTypes } from '../types'; // const API_URL = process.env.API_URL\n\nvar API_DUMMY_URL = process.env.API_DUMMY_URL;\nexport var getListTransaction = function getListTransaction(page, len, dateFrom, dateTo, sortBy, nameVal) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var from, to, keywords, params, url, responses, headers, total, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                from = dateFrom ? \"&date_gte=\".concat(dateFrom) : '';\n                to = dateTo ? \"&date_lte=\".concat(dateTo) : '';\n                keywords = nameVal ? \"name_like=\".concat(nameVal, \"&\") : '';\n                params = \"\".concat(keywords, \"_start=\").concat(page * len, \"&_limit=\").concat(len).concat(from).concat(to, \"&_sort=\").concat(sortBy, \"&_order=desc\");\n                url = \"\".concat(API_DUMMY_URL, \"/listTransaction?\").concat(params);\n                _context.next = 7;\n                return fetch(url);\n\n              case 7:\n                responses = _context.sent;\n                _context.next = 10;\n                return responses.headers;\n\n              case 10:\n                headers = _context.sent;\n                _context.next = 13;\n                return headers.get('x-total-count');\n\n              case 13:\n                total = _context.sent;\n                dispatch(getTotalTransaction(total));\n                _context.next = 17;\n                return responses.json();\n\n              case 17:\n                data = _context.sent;\n                return _context.abrupt(\"return\", dispatch({\n                  type: actionTypes.LIST_TRANSACTION,\n                  payload: data\n                }));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getAllExportedTransaction =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(dateFrom, dateTo, sortBy, nameVal) {\n    var keywords, params, url, responses, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            keywords = nameVal ? \"name_like=\".concat(nameVal, \"&\") : '';\n            params = \"\".concat(keywords, \"date_gte=\").concat(dateFrom, \"&date_lte=\").concat(dateTo, \"&_sort=\").concat(sortBy, \"&_order=desc\");\n            url = \"\".concat(API_DUMMY_URL, \"/listTransaction?\").concat(params);\n            _context2.next = 5;\n            return fetch(url);\n\n          case 5:\n            responses = _context2.sent;\n            _context2.next = 8;\n            return responses.json();\n\n          case 8:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAllExportedTransaction(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getTotalTransaction = function getTotalTransaction(data) {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.TOTAL_TRANSACTION,\n      payload: data\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}