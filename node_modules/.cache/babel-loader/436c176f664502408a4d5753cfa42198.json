{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Container, Row, Col } from 'reactstrap';\nimport TableBox from '../components/tables';\nimport Pagination from '../components/cards/PaginationCard';\nimport SimpleReportCard from '../components/cards/SimpleReportCard';\nimport { getListTransaction } from '../components/actions';\nimport { timestampToDateTime, numberToCurrency, numberWithDot } from '../components/functions';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  _createClass(Dashboard, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, props, stores;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store;\n                props = {\n                  showHeader: true,\n                  showFooter: true,\n                  transanctionPage: 0,\n                  transactionMaxLen: 10\n                };\n                _context.next = 4;\n                return store.getState();\n\n              case 4:\n                stores = _context.sent;\n                _context.prev = 5;\n\n                if (stores.listTransaction) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 9;\n                return store.dispatch(getListTransaction(props.transanctionPage, props.transactionMaxLen));\n\n              case 9:\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](5);\n                props.error = 'Unable to fetch AsyncData on server';\n\n              case 14:\n                return _context.abrupt(\"return\", props);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[5, 11]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onPaginationClick\", function (page) {\n      var _this$state = _this.state,\n          transactionFetchLen = _this$state.transactionFetchLen,\n          transactionDateFrom = _this$state.transactionDateFrom,\n          transactionDateTo = _this$state.transactionDateTo,\n          transactionSortBy = _this$state.transactionSortBy,\n          transactionSearchKey = _this$state.transactionSearchKey;\n\n      _this.props.getListTransaction(page, transactionFetchLen, transactionDateFrom, transactionDateTo, transactionSortBy, transactionSearchKey);\n\n      _this.setState({\n        transactionPage: page\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFilterInit\", function (dateFrom, dateTo) {\n      var _this$state2 = _this.state,\n          transactionFetchLen = _this$state2.transactionFetchLen,\n          transactionSortBy = _this$state2.transactionSortBy,\n          transactionSearchKey = _this$state2.transactionSearchKey;\n\n      _this.props.getListTransaction(0, transactionFetchLen, dateFrom, dateTo, transactionSortBy, transactionSearchKey);\n\n      _this.setState({\n        transactionPage: 0,\n        transactionDateFrom: dateFrom,\n        transactionDateTo: dateTo\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSortInit\", function (e) {\n      var target = e.target,\n          value = target.value;\n      var _this$state3 = _this.state,\n          transactionFetchLen = _this$state3.transactionFetchLen,\n          transactionDateFrom = _this$state3.transactionDateFrom,\n          transactionDateTo = _this$state3.transactionDateTo,\n          transactionSearchKey = _this$state3.transactionSearchKey;\n\n      _this.props.getListTransaction(0, transactionFetchLen, transactionDateFrom, transactionDateTo, value, transactionSearchKey);\n\n      _this.setState({\n        transactionPage: 0,\n        transactionSortBy: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchKeyword\", function (keywords) {\n      var _this$state4 = _this.state,\n          transactionPage = _this$state4.transactionPage,\n          transactionFetchLen = _this$state4.transactionFetchLen,\n          transactionDateFrom = _this$state4.transactionDateFrom,\n          transactionDateTo = _this$state4.transactionDateTo,\n          transactionSortBy = _this$state4.transactionSortBy;\n\n      _this.props.getListTransaction(transactionPage, transactionFetchLen, transactionDateFrom, transactionDateTo, transactionSortBy, keywords);\n\n      _this.setState({\n        transactionSearchKey: keywords\n      });\n    });\n\n    _this.state = {\n      title: props.companyName,\n      subTitle: \"Content Management System\",\n      showHeader: props.showHeader,\n      headerHeight: props.headerHeight,\n      navIsOpen: props.navIsOpen,\n      navMaxWidth: props.showHeader ? props.navMaxWidth : \"0px\",\n      navMinWidth: props.showHeader ? props.navMinWidth : \"0px\",\n      transactionPage: props.transanctionPage,\n      transactionFetchLen: props.transactionMaxLen,\n      transactionDateFrom: undefined,\n      transactionDateTo: undefined,\n      transactionSortBy: \"date\",\n      transactionSearchKey: \"\",\n      listTransaction: props.listTransaction,\n      totalTransaction: props.totalTransaction,\n      dailyProfit: props.dailyProfit\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState({\n        navIsOpen: nextProps.navIsOpen,\n        listTransaction: nextProps.listTransaction,\n        totalTransaction: nextProps.totalTransaction,\n        lineChart: nextProps.lineChart\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          showHeader = _this$state5.showHeader,\n          headerHeight = _this$state5.headerHeight,\n          navIsOpen = _this$state5.navIsOpen,\n          navMinWidth = _this$state5.navMinWidth,\n          navMaxWidth = _this$state5.navMaxWidth,\n          listTransaction = _this$state5.listTransaction,\n          totalTransaction = _this$state5.totalTransaction,\n          transactionPage = _this$state5.transactionPage,\n          transactionFetchLen = _this$state5.transactionFetchLen,\n          transactionSortBy = _this$state5.transactionSortBy; // Sample Data\n\n      var date = new Date();\n      var dailyPointCollection = {\n        today: 2120,\n        yesterday: 1919,\n        lastSync: date.getTime()\n      };\n      var dailyProfit = {\n        today: 126746000,\n        yesterday: 114219000,\n        lastSync: date.getTime()\n      };\n      var dailyItemSold = {\n        today: 120,\n        yesterday: 205,\n        lastSync: date.getTime()\n      };\n      return React.createElement(\"div\", {\n        role: \"main\",\n        className: \"animate-all fast bg-light\",\n        style: {\n          paddingTop: showHeader ? headerHeight : 0,\n          paddingLeft: navMinWidth,\n          overflowX: \"hidden\"\n        }\n      }, React.createElement(Container, {\n        fluid: true,\n        className: \"contentContainer px-4 pt-4 pb-2\",\n        style: {\n          marginLeft: navIsOpen ? navMaxWidth - navMinWidth : 0,\n          width: navIsOpen ? \"calc(100% - \".concat(navMaxWidth - navMinWidth, \"px)\") : '100%'\n        }\n      }, React.createElement(Row, null, React.createElement(Col, {\n        xs: \"12\",\n        md: \"4\"\n      }, React.createElement(SimpleReportCard, {\n        className: \"bg-primary text-white\",\n        title: \"Today Total Sales\"\n      }, React.createElement(\"div\", null, React.createElement(\"h4\", {\n        className: \"m-0 text-right\"\n      }, React.createElement(\"i\", {\n        className: \"mr-2 \".concat(dailyProfit.today > dailyProfit.yesterday ? 'icon-arrow-up' : 'icon-arrow-down')\n      }), React.createElement(\"b\", null, numberToCurrency(dailyProfit.today, \"IDR\", false))), React.createElement(\"p\", {\n        className: \"text-right font-14\"\n      }, \"Yesterday: \", React.createElement(\"b\", null, numberToCurrency(dailyProfit.yesterday, \"IDR\", false))), React.createElement(\"p\", {\n        className: \"m-0 text-right font-10\"\n      }, timestampToDateTime(dailyProfit.lastSync, true))))), React.createElement(Col, {\n        xs: \"12\",\n        md: \"4\"\n      }, React.createElement(SimpleReportCard, {\n        className: \"bg-success text-white\",\n        title: \"Today Points Collected\"\n      }, React.createElement(\"div\", null, React.createElement(\"h4\", {\n        className: \"m-0 text-right\"\n      }, React.createElement(\"i\", {\n        className: \"mr-2 \".concat(dailyPointCollection.today > dailyPointCollection.yesterday ? 'icon-arrow-up' : 'icon-arrow-down')\n      }), React.createElement(\"b\", null, numberWithDot(dailyPointCollection.today), \" \", dailyPointCollection.today > 1 ? 'Points' : 'Point')), React.createElement(\"p\", {\n        className: \"text-right font-14\"\n      }, \"Yesterday: \", React.createElement(\"b\", null, numberWithDot(dailyPointCollection.yesterday), \" \", dailyPointCollection.yesterday > 1 ? 'Points' : 'Point')), React.createElement(\"p\", {\n        className: \"m-0 text-right font-10\"\n      }, timestampToDateTime(dailyPointCollection.lastSync, true))))), React.createElement(Col, {\n        xs: \"12\",\n        md: \"4\"\n      }, React.createElement(SimpleReportCard, {\n        className: \"bg-danger text-white\",\n        title: \"Today Item's Sold\"\n      }, React.createElement(\"div\", null, React.createElement(\"h4\", {\n        className: \"m-0 text-right\"\n      }, React.createElement(\"i\", {\n        className: \"mr-2 \".concat(dailyItemSold.today > dailyItemSold.yesterday ? 'icon-arrow-up' : 'icon-arrow-down')\n      }), React.createElement(\"b\", null, numberWithDot(dailyItemSold.today), \" \", dailyItemSold.today > 1 ? 'Items' : 'Item')), React.createElement(\"p\", {\n        className: \"text-right font-14\"\n      }, \"Yesterday: \", React.createElement(\"b\", null, numberWithDot(dailyItemSold.yesterday), \" \", dailyItemSold.yesterday > 1 ? 'Items' : 'Item')), React.createElement(\"p\", {\n        className: \"m-0 text-right font-10\"\n      }, timestampToDateTime(dailyItemSold.lastSync, true))))), React.createElement(Col, {\n        xs: \"12\"\n      }, React.createElement(TableBox, {\n        title: \"Today's Item Sales\",\n        isResponsive: true,\n        tHead: [\"#\", \"Item Name\", \"QTY\", \"Item Price\", \"Total Price\", \"Buy Date\"],\n        sortItems: [{\n          id: \"name\",\n          name: \"Item Name\"\n        }, {\n          id: \"qty\",\n          name: \"Quantity\"\n        }, {\n          id: \"price\",\n          name: \"Item Price\"\n        }, {\n          id: \"total\",\n          name: \"Total Price\"\n        }, {\n          id: \"date\",\n          name: \"Buy Date\"\n        }],\n        onSortClick: this.onSortInit,\n        sortValue: transactionSortBy,\n        deepSearch: true,\n        maxRangeDateFilter: 5,\n        exportToFile: true,\n        exportData: listTransaction,\n        exportFileName: \"Transaction\".concat(new Date().getTime()),\n        onFilterClick: this.onFilterInit,\n        onKeySearch: this.onSearchKeyword,\n        noResult: listTransaction.length === 0,\n        pagination: React.createElement(Pagination, {\n          ariaLabel: \"Page navigation\",\n          size: \"sm\",\n          totalContent: totalTransaction,\n          currentPage: transactionPage,\n          contentMaxLength: transactionFetchLen,\n          onClick: this.onPaginationClick\n        })\n      }, listTransaction.map(function (data, key) {\n        return React.createElement(\"tr\", {\n          key: key\n        }, React.createElement(\"th\", {\n          scope: \"row\"\n        }, key + 1 + transactionPage * transactionFetchLen), React.createElement(\"td\", null, data.name), React.createElement(\"td\", null, data.qty), React.createElement(\"td\", null, numberToCurrency(data.price, data.currency, false)), React.createElement(\"td\", null, numberToCurrency(data.qty * data.price, data.currency, false)), React.createElement(\"td\", null, timestampToDateTime(data.date, false)));\n      }))))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getListTransaction: bindActionCreators(getListTransaction, dispatch)\n  };\n};\n\nexport default connect(function (state) {\n  return state;\n}, mapDispatchToProps)(Dashboard);","map":null,"metadata":{},"sourceType":"module"}