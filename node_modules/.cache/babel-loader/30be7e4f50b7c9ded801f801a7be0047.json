{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tog-randy/Source/BCA/Project/pages/questionForm.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { AvForm } from 'availity-reactstrap-validation';\nimport ContentBox from '../components/contentBox';\nimport FormInput from '../components/form/inputForm';\nimport FormSelect from '../components/form/selectForm';\nimport FormInputValidation from '../components/form/validateInputForm';\nimport FormSelectValidation from '../components/form/validateSelectForm';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport { regexHtmlTag } from '../components/functions';\nimport { getListCities } from '../components/actions';\n\nvar QuestionForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QuestionForm, _React$Component);\n\n  _createClass(QuestionForm, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var store, stores;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                store = _ref.store;\n                _context.next = 3;\n                return store.getState();\n\n              case 3:\n                stores = _context.sent;\n                _context.prev = 4;\n\n                if (stores.listCity) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 8;\n                return store.dispatch(getListCities());\n\n              case 8:\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n                props.error = 'Unable to fetch AsyncData on server';\n\n              case 13:\n                return _context.abrupt(\"return\", props);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[4, 10]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function QuestionForm(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionForm);\n\n    console.log(\"Test\");\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionForm).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var target = e.target,\n          value = target.value,\n          name = target.name,\n          related = target.getAttribute('related');\n\n      _this.setState(_defineProperty({}, name, regexHtmlTag(value)));\n\n      if (related) _this.setState(_defineProperty({}, related, regexHtmlTag(value)));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectOption\", function (e) {\n      var target = e.target,\n          value = target.value,\n          name = target.name,\n          related = target.getAttribute('related');\n\n      _this.setState(_defineProperty({}, name, Number(value)));\n\n      if (related) _this.setState(_defineProperty({}, related, 0));\n    });\n\n    _this.state = {\n      formNama: \"Budi Santoso\",\n      formEmail: \"budi@san.toso\",\n      formTelp: \"0210909090\",\n      formKota: 2,\n      formProvinsi: 0,\n      formNomor: 10,\n      listCity: props.listCity\n    };\n    return _this;\n  }\n\n  _createClass(QuestionForm, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState({\n        listCity: nextProps.listCity\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listCity = this.state.listCity;\n      var listProvince = listCity.filter(function (data) {\n        return data.id === _this2.state.formKota;\n      })[0].provinsi;\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ContentBox, {\n        title: \"Registration Form\",\n        className: \"bg-grey rounded shadow-sm p-3 mb-4 overflow-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(AvForm, {\n        onValidSubmit: this.handleSubmit,\n        method: \"post\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(FormInput, {\n        withLabel: true,\n        labelName: \"Nama Lengkap - Tanpa Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-4 px-2 bg-white mb-0\",\n        formId: \"yourFormNama\",\n        formType: \"text\",\n        formName: \"formNama\",\n        formPlaceholder: \"Masukan Nama\",\n        formValue: this.state.formNama,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(FormInputValidation, {\n        withLabel: true,\n        labelName: \"Alamat Email - Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-4 px-2 bg-white mb-0\",\n        formId: \"yourFormEmail\",\n        formType: \"email\",\n        formName: \"formEmail\",\n        formPlaceholder: \"Masukan alamat email\",\n        formErrorMessage: \"Alamat email salah\",\n        onChange: this.handleChange,\n        formValue: this.state.formEmail,\n        formValidate: {\n          required: {\n            value: true,\n            errorMessage: 'Alamat email tidak boleh kosong'\n          },\n          email: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(FormInput, {\n        withLabel: true,\n        labelName: \"Nomor Telpon - Tanpa Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-4 px-2 bg-white mb-0\",\n        formId: \"yourFormTelp\",\n        formType: \"text\",\n        formName: \"formTelp\",\n        formPlaceholder: \"Masukan Nomor Telpon\",\n        formValue: this.state.formTelp,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(FormSelect, {\n        withLabel: true,\n        labelName: \"Kota - Tanpa Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-2 px-2 bg-white mb-0\",\n        formId: \"yourFormKota\",\n        formName: \"formKota\",\n        formPlaceholder: \"Pilih Kota\",\n        formRelation: \"formProvinsi\",\n        formOptionData: listCity,\n        formValue: this.state.formKota,\n        onChange: this.handleSelectOption,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(FormSelectValidation, {\n        withLabel: true,\n        labelName: \"Provinsi - Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-2 px-2 bg-white mb-0\",\n        formId: \"yourFormKota\",\n        formName: \"formProvinsi\",\n        formPlaceholder: \"Pilih Provinsi\",\n        formValue: this.state.formProvinsi,\n        formOptionData: listProvince,\n        onChange: this.handleSelectOption,\n        formErrorMessage: \"Silahkan pilih provinsi\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(FormInput, {\n        withLabel: true,\n        labelName: \"Nomor Rumah - Tanpa Validasi\",\n        labelClassName: \"inputLabel position-absolute font-12 text-primary bg-white\",\n        formClassName: \"py-4 px-2 bg-white mb-0\",\n        formId: \"yourFormNomor\",\n        formType: \"number\",\n        formName: \"formNomor\",\n        formPlaceholder: \"Masukan Nomor Rumah\",\n        formValue: this.state.formNomor,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(Button, {\n        size: \"lg\",\n        color: \"primary\",\n        type: \"submit\",\n        className: \"float-right mt-3 mb-2 px-5 text-uppercase font-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Kirim\")))));\n    }\n  }]);\n\n  return QuestionForm;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getListCities: bindActionCreators(getListCities, dispatch)\n  };\n};\n\nexport default connect(function (state) {\n  return state;\n}, mapDispatchToProps)(QuestionForm);","map":{"version":3,"sources":["/home/tog-randy/Source/BCA/Project/pages/questionForm.js"],"names":["React","connect","bindActionCreators","AvForm","ContentBox","FormInput","FormSelect","FormInputValidation","FormSelectValidation","Container","Row","Col","Button","regexHtmlTag","getListCities","QuestionForm","store","getState","stores","listCity","dispatch","props","error","console","log","e","target","value","name","related","getAttribute","setState","Number","state","formNama","formEmail","formTelp","formKota","formProvinsi","formNomor","nextProps","listProvince","filter","data","id","provinsi","handleSubmit","handleChange","required","errorMessage","email","handleSelectOption","Component","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { AvForm } from 'availity-reactstrap-validation'\nimport ContentBox from '../components/contentBox'\nimport FormInput from '../components/form/inputForm'\nimport FormSelect from '../components/form/selectForm'\nimport FormInputValidation from '../components/form/validateInputForm'\nimport FormSelectValidation from '../components/form/validateSelectForm'\nimport { Container, Row, Col, Button } from 'reactstrap'\nimport { regexHtmlTag } from '../components/functions'\nimport { getListCities } from '../components/actions'\n\nclass QuestionForm extends React.Component {\n\tstatic async getInitialProps({ store }) {\n\t\tlet stores = await store.getState()\n\t\ttry {\n\t\t\tif(!stores.listCity) await store.dispatch(getListCities())\n\t\t} catch (e) {\n\t\t\tprops.error = 'Unable to fetch AsyncData on server'\n\t\t}\n\t\treturn props\n\t}\n\n\tconstructor(props) {\n        console.log(\"Test\")\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tformNama: \"Budi Santoso\",\n\t\t\tformEmail: \"budi@san.toso\",\n\t\t\tformTelp: \"0210909090\",\n\t\t\tformKota: 2,\n\t\t\tformProvinsi: 0,\n\t\t\tformNomor: 10,\n\t\t\tlistCity: props.listCity\n\t\t}\n\t}\n\n\tUNSAFE_componentWillReceiveProps(nextProps) {\n\t\tthis.setState({\n\t\t\tlistCity: nextProps.listCity,\n\t\t})\n\t}\n\n\thandleChange = (e) => {\n\t\tconst target = e.target, value = target.value, name = target.name, related = target.getAttribute('related')\n\t\tthis.setState({ [name]: regexHtmlTag(value) })\n\t\tif(related) this.setState({ [related]: regexHtmlTag(value) })\n\t}\n\n\thandleSelectOption = (e) => {\n\t\tconst target = e.target, value = target.value, name = target.name, related = target.getAttribute('related')\n\t\tthis.setState({ [name]: Number(value) })\n\t\tif(related) this.setState({ [related]: 0 })\n\t}\n \n\trender() {\n\t\tconst { listCity } = this.state\n\t\tconst listProvince = listCity.filter(data => data.id === this.state.formKota)[0].provinsi\n\t\treturn (\n            <Row>\n                <Col lg=\"12\">\n                    <ContentBox \n                        title=\"Registration Form\"\n                        className=\"bg-grey rounded shadow-sm p-3 mb-4 overflow-auto\"\n                    >\n                        <AvForm onValidSubmit={this.handleSubmit} method=\"post\" autoComplete=\"off\" >\n                            <FormInput \n                                withLabel={true}\n                                labelName=\"Nama Lengkap - Tanpa Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-4 px-2 bg-white mb-0\"\n                                formId=\"yourFormNama\" \n                                formType=\"text\" \n                                formName=\"formNama\"\n                                formPlaceholder=\"Masukan Nama\" \n                                formValue={this.state.formNama}\n                                onChange={this.handleChange} \n                            />\n                            <FormInputValidation \n                                withLabel={true}\n                                labelName=\"Alamat Email - Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-4 px-2 bg-white mb-0\"\n                                formId=\"yourFormEmail\" \n                                formType=\"email\" \n                                formName=\"formEmail\" \n                                formPlaceholder=\"Masukan alamat email\" \n                                formErrorMessage=\"Alamat email salah\" \n                                onChange={this.handleChange} \n                                formValue={this.state.formEmail}\n                                formValidate={{\n                                    required: { value: true, errorMessage: 'Alamat email tidak boleh kosong' },\n                                    email: true\n                                }} \n                            />\n                            <FormInput \n                                withLabel={true}\n                                labelName=\"Nomor Telpon - Tanpa Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-4 px-2 bg-white mb-0\"\n                                formId=\"yourFormTelp\" \n                                formType=\"text\" \n                                formName=\"formTelp\" \n                                formPlaceholder=\"Masukan Nomor Telpon\" \n                                formValue={this.state.formTelp}\n                                onChange={this.handleChange} \n                            />\n                            <FormSelect\n                                withLabel={true}\n                                labelName=\"Kota - Tanpa Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-2 px-2 bg-white mb-0\"\n                                formId=\"yourFormKota\" \n                                formName=\"formKota\" \n                                formPlaceholder=\"Pilih Kota\"\n                                formRelation=\"formProvinsi\"\n                                formOptionData={listCity}\n                                formValue={this.state.formKota}\n                                onChange={this.handleSelectOption} \n                            />\n                            <FormSelectValidation \n                                withLabel={true}\n                                labelName=\"Provinsi - Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-2 px-2 bg-white mb-0\"\n                                formId=\"yourFormKota\" \n                                formName=\"formProvinsi\" \n                                formPlaceholder=\"Pilih Provinsi\"\n                                formValue={this.state.formProvinsi}\n                                formOptionData={listProvince}\n                                onChange={this.handleSelectOption}\n                                formErrorMessage=\"Silahkan pilih provinsi\" \n                            />\n                            <FormInput \n                                withLabel={true}\n                                labelName=\"Nomor Rumah - Tanpa Validasi\"\n                                labelClassName=\"inputLabel position-absolute font-12 text-primary bg-white\"\n                                formClassName=\"py-4 px-2 bg-white mb-0\"\n                                formId=\"yourFormNomor\" \n                                formType=\"number\" \n                                formName=\"formNomor\"\n                                formPlaceholder=\"Masukan Nomor Rumah\" \n                                formValue={this.state.formNomor}\n                                onChange={this.handleChange} \n                            />\n                            <Button size=\"lg\" color=\"primary\" type=\"submit\" className=\"float-right mt-3 mb-2 px-5 text-uppercase font-12\">Kirim</Button>\n                        </AvForm>\n                    </ContentBox>\n                </Col>\n            </Row>\n\t\t)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tgetListCities: bindActionCreators(getListCities, dispatch)\n\t}\n}\nexport default connect(state => state, mapDispatchToProps)(QuestionForm)"]},"metadata":{},"sourceType":"module"}