{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nimport { actionTypes } from '../types'; // const API_URL = process.env.API_URL\n\nvar API_DUMMY_URL = process.env.API_DUMMY_URL;\nexport var getListTransaction = function getListTransaction(page, len, dateFrom, dateTo, sortBy, nameVal) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var from, to, keywords, params, url, responses, headers, total, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                from = dateFrom ? \"&date_gte=\".concat(dateFrom) : '';\n                to = dateTo ? \"&date_lte=\".concat(dateTo) : '';\n                keywords = nameVal ? \"name_like=\".concat(nameVal, \"&\") : '';\n                params = \"\".concat(keywords, \"_start=\").concat(page * len, \"&_limit=\").concat(len).concat(from).concat(to, \"&_sort=\").concat(sortBy, \"&_order=desc\");\n                url = \"\".concat(API_DUMMY_URL, \"/listTransaction?\").concat(params);\n                _context.next = 7;\n                return fetch(url);\n\n              case 7:\n                responses = _context.sent;\n                _context.next = 10;\n                return responses.headers;\n\n              case 10:\n                headers = _context.sent;\n                _context.next = 13;\n                return headers.get('x-total-count');\n\n              case 13:\n                total = _context.sent;\n                dispatch(getTotalTransaction(total));\n                _context.next = 17;\n                return responses.json();\n\n              case 17:\n                data = _context.sent;\n                return _context.abrupt(\"return\", dispatch({\n                  type: actionTypes.LIST_TRANSACTION,\n                  payload: data\n                }));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getAllExportedTransaction =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(dateFrom, dateTo, sortBy, nameVal) {\n    var keywords, params, url, responses, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            keywords = nameVal ? \"name_like=\".concat(nameVal, \"&\") : '';\n            params = \"\".concat(keywords, \"date_gte=\").concat(dateFrom, \"&date_lte=\").concat(dateTo, \"&_sort=\").concat(sortBy, \"&_order=desc\");\n            url = \"\".concat(API_DUMMY_URL, \"/listTransaction?\").concat(params);\n            _context2.next = 5;\n            return fetch(url);\n\n          case 5:\n            responses = _context2.sent;\n            _context2.next = 8;\n            return responses.json();\n\n          case 8:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getAllExportedTransaction(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getTotalTransaction = function getTotalTransaction(data) {\n  return function (dispatch) {\n    return dispatch({\n      type: actionTypes.TOTAL_TRANSACTION,\n      payload: data\n    });\n  };\n};","map":{"version":3,"sources":["/home/tog-randy/Source/next.js/Chapter 2/next-pwa-withredux-master/components/actions/ListTransactionApi.js"],"names":["fetch","actionTypes","API_DUMMY_URL","process","env","getListTransaction","page","len","dateFrom","dateTo","sortBy","nameVal","dispatch","from","to","keywords","params","url","responses","headers","get","total","getTotalTransaction","json","data","type","LIST_TRANSACTION","payload","getAllExportedTransaction","TOTAL_TRANSACTION"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CAEA;;AACA,IAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYF,aAAlC;AAEA,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,GAAP,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAkD,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1EC,gBAAAA,IAD0E,GACnEL,QAAQ,uBAAgBA,QAAhB,IAA6B,EAD8B;AAE1EM,gBAAAA,EAF0E,GAErEL,MAAM,uBAAgBA,MAAhB,IAA2B,EAFoC;AAG1EM,gBAAAA,QAH0E,GAG/DJ,OAAO,uBAAgBA,OAAhB,SAA6B,EAH2B;AAI1EK,gBAAAA,MAJ0E,aAI9DD,QAJ8D,oBAI5CT,IAAI,GAACC,GAJuC,qBAIzBA,GAJyB,SAInBM,IAJmB,SAIZC,EAJY,oBAIAJ,MAJA;AAK1EO,gBAAAA,GAL0E,aAKjEf,aALiE,8BAKhCc,MALgC;AAAA;AAAA,uBAMxDhB,KAAK,CAACiB,GAAD,CANmD;;AAAA;AAM1EC,gBAAAA,SAN0E;AAAA;AAAA,uBAO1DA,SAAS,CAACC,OAPgD;;AAAA;AAO1EA,gBAAAA,OAP0E;AAAA;AAAA,uBAQ5DA,OAAO,CAACC,GAAR,CAAY,eAAZ,CAR4D;;AAAA;AAQ1EC,gBAAAA,KAR0E;AAShFT,gBAAAA,QAAQ,CAACU,mBAAmB,CAACD,KAAD,CAApB,CAAR;AATgF;AAAA,uBAU7DH,SAAS,CAACK,IAAV,EAV6D;;AAAA;AAU1EC,gBAAAA,IAV0E;AAAA,iDAWzEZ,QAAQ,CAAC;AAAEa,kBAAAA,IAAI,EAAExB,WAAW,CAACyB,gBAApB;AAAsCC,kBAAAA,OAAO,EAAEH;AAA/C,iBAAD,CAXiE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAcP,OAAO,IAAMI,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOpB,QAAP,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BI,YAAAA,QAD+B,GACpBJ,OAAO,uBAAgBA,OAAhB,SAA6B,EADhB;AAE/BK,YAAAA,MAF+B,aAEnBD,QAFmB,sBAECP,QAFD,uBAEsBC,MAFtB,oBAEsCC,MAFtC;AAG/BO,YAAAA,GAH+B,aAGtBf,aAHsB,8BAGWc,MAHX;AAAA;AAAA,mBAIbhB,KAAK,CAACiB,GAAD,CAJQ;;AAAA;AAI/BC,YAAAA,SAJ+B;AAAA;AAAA,mBAKlBA,SAAS,CAACK,IAAV,EALkB;;AAAA;AAK/BC,YAAAA,IAL+B;AAAA,8CAM9BA,IAN8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAzBI,yBAAyB;AAAA;AAAA;AAAA,GAA/B;;AASP,IAAMN,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACE,IAAD;AAAA,SAAU,UAACZ,QAAD,EAAc;AAChD,WAAOA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAExB,WAAW,CAAC4B,iBAApB;AAAuCF,MAAAA,OAAO,EAAEH;AAAhD,KAAD,CAAf;AACH,GAF2B;AAAA,CAA5B","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { actionTypes } from '../types'\n\n// const API_URL = process.env.API_URL\nconst API_DUMMY_URL = process.env.API_DUMMY_URL\n\nexport const getListTransaction = (page, len, dateFrom, dateTo, sortBy, nameVal) => async (dispatch) => {\n    const from = dateFrom ? `&date_gte=${dateFrom}` : ''\n    const to = dateTo ? `&date_lte=${dateTo}` : ''\n    const keywords = nameVal ? `name_like=${nameVal}&` : ''\n    const params = `${keywords}_start=${page*len}&_limit=${len}${from}${to}&_sort=${sortBy}&_order=desc`\n    const url = `${API_DUMMY_URL}/listTransaction?${params}`\n    const responses = await fetch(url)\n    const headers = await responses.headers\n    const total = await headers.get('x-total-count')\n    dispatch(getTotalTransaction(total))\n    const data = await responses.json()\n    return dispatch({ type: actionTypes.LIST_TRANSACTION, payload: data })\n}\n\nexport const getAllExportedTransaction = async (dateFrom, dateTo, sortBy, nameVal) => {\n    const keywords = nameVal ? `name_like=${nameVal}&` : ''\n    const params = `${keywords}date_gte=${dateFrom}&date_lte=${dateTo}&_sort=${sortBy}&_order=desc`\n    const url = `${API_DUMMY_URL}/listTransaction?${params}`\n    const responses = await fetch(url)\n    const data = await responses.json()\n    return data\n}\n\nconst getTotalTransaction = (data) => (dispatch) => {\n    return dispatch({ type: actionTypes.TOTAL_TRANSACTION, payload: data })\n}"]},"metadata":{},"sourceType":"module"}