{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from \"react\";\nimport { useState } from 'react';\nimport { Table, Row, Col, Button } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\nimport FormSelect from './form/selectForm';\nimport FormInput from './form/inputForm';\nimport Workbook from 'react-excel-workbook';\nimport { addDays, timestampToDateTime } from './functions';\nexport default (function (props) {\n  var title = props.title,\n      tHead = props.tHead,\n      children = props.children,\n      pagination = props.pagination,\n      noResult = props.noResult,\n      deepSearch = props.deepSearch,\n      onFilterClick = props.onFilterClick,\n      onKeySearch = props.onKeySearch,\n      exportToFile = props.exportToFile,\n      exportData = props.exportData,\n      exportFileName = props.exportFileName,\n      sortItems = props.sortItems,\n      sortValue = props.sortValue,\n      onSortClick = props.onSortClick,\n      maxRangeDateFilter = props.maxRangeDateFilter;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      startDate = _useState2[0],\n      setStartDate = _useState2[1];\n\n  var _useState3 = useState(new Date(startDate)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      endDate = _useState4[0],\n      setEndDate = _useState4[1];\n\n  var _useState5 = useState({\n    keywords: \"\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputs = _useState6[0],\n      setInputs = _useState6[1];\n\n  var _useState7 = useState({\n    typeFile: undefined\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      saveType = _useState8[0],\n      setSaveType = _useState8[1];\n\n  var saveTypeOption = [{\n    id: 1,\n    name: \"EXCEL\"\n  }, {\n    id: 2,\n    name: \"PDF\"\n  }];\n\n  var handleExportSelect = function handleExportSelect(e) {\n    e.persist();\n    setSaveType(function () {\n      return {\n        typeFile: e.target.value\n      };\n    });\n  };\n\n  var handleSearchKeyword = function handleSearchKeyword(e) {\n    e.persist();\n    setInputs(function (inputs) {\n      return _objectSpread({}, inputs, _defineProperty({}, e.target.name, e.target.value));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"bg-white rounded shadow-sm p-3 mb-3 overflow-visible\"\n  }, title ? React.createElement(\"h5\", {\n    className: \"font-16 text-primary mb-3\"\n  }, title) : \"\", React.createElement(Row, null, onKeySearch ? React.createElement(Col, {\n    xs: \"12\",\n    md: \"6\"\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-start w-100\"\n  }, React.createElement(FormInput, {\n    containerClassName: \"w-100\",\n    formClassName: \"px-2 bg-white mb-0\",\n    formId: \"yourFormFilterKeywords\",\n    formType: \"text\",\n    formName: \"keywords\",\n    formPlaceholder: \"Search Keywords\",\n    formValue: inputs.keywords,\n    formSize: \"sm\",\n    onChange: handleSearchKeyword\n  }), React.createElement(Button, {\n    size: \"sm\",\n    color: \"primary\",\n    onClick: function onClick() {\n      return onKeySearch(inputs.keywords);\n    },\n    className: \"mb-3 ml-2 px-2 font-12 text-uppercase\",\n    style: {\n      marginTop: \"5px\"\n    }\n  }, \"Search\"))) : \"\", deepSearch && onFilterClick ? React.createElement(Col, {\n    xs: \"12\",\n    md: \"6\"\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-start w-100\"\n  }, React.createElement(\"div\", {\n    className: \"mr-2 w-50\",\n    style: {\n      paddingTop: \"5px\"\n    }\n  }, React.createElement(DatePicker, {\n    selected: startDate,\n    onChange: function onChange(date) {\n      setStartDate(date);\n      setEndDate(addDays(new Date(date), maxRangeDateFilter));\n    },\n    selectsStart: true,\n    startDate: startDate,\n    endDate: endDate,\n    dateFormat: \"dd/MM/yyyy\",\n    className: \"px-2 bg-white mb-0 form-control-sm form-control text-center\"\n  })), React.createElement(\"div\", {\n    className: \"mr-2 w-50\",\n    style: {\n      paddingTop: \"5px\"\n    }\n  }, React.createElement(DatePicker, {\n    selected: endDate,\n    onChange: function onChange(date) {\n      return setEndDate(date);\n    },\n    minDate: startDate,\n    maxDate: addDays(new Date(startDate), maxRangeDateFilter),\n    selectsEnd: true,\n    startDate: startDate,\n    endDate: endDate,\n    dateFormat: \"dd/MM/yyyy\",\n    className: \"px-2 bg-white mb-0 form-control-sm form-control text-center\"\n  })), React.createElement(Button, {\n    size: \"sm\",\n    color: \"primary\",\n    onClick: function onClick() {\n      return onFilterClick(startDate.getTime(), endDate.getTime());\n    },\n    className: \"mb-3 px-2 font-12 text-uppercase\",\n    style: {\n      marginTop: \"5px\",\n      height: \"31px\"\n    }\n  }, \"Filter\"))) : \"\", exportToFile ? React.createElement(Col, {\n    xs: \"12\",\n    md: \"4\"\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-end w-100\"\n  }, React.createElement(\"span\", {\n    className: \"mr-2 text-left font-14\",\n    style: {\n      paddingTop: \"10px\",\n      minWidth: \"60px\"\n    }\n  }, \"Save As :\"), React.createElement(FormSelect, {\n    containerClassName: \"w-100\",\n    formId: \"yourExportToFile\",\n    formName: \"ExportToFile\",\n    formSize: \"sm\",\n    formPlaceholder: \"Select Format\",\n    formOptionData: saveTypeOption,\n    formValue: saveType.typeFile,\n    onChange: handleExportSelect\n  }), Number(saveType.typeFile) === 1 ? React.createElement(Workbook, {\n    filename: \"\".concat(exportFileName, \".xlsx\"),\n    element: React.createElement(Button, {\n      size: \"sm\",\n      color: \"primary\",\n      className: \"mb-3 ml-2 px-2 font-12 text-uppercase\",\n      style: {\n        marginTop: \"5px\",\n        height: \"31px\"\n      }\n    }, React.createElement(\"i\", {\n      className: \"icon-arrow-down font-14\"\n    }))\n  }, React.createElement(Workbook.Sheet, {\n    data: exportData,\n    name: exportFileName\n  }, sortItems.map(function (item, key) {\n    return React.createElement(Workbook.Column, {\n      key: key,\n      label: item.name,\n      value: item.name.toLowerCase().indexOf('date') > -1 ? function (row) {\n        return timestampToDateTime(row.date, false);\n      } : item.id\n    });\n  }))) : Number(saveType.typeFile) === 2 ? React.createElement(\"div\", null, \"this is pdf\") : \"\")) : React.createElement(Col, {\n    xs: \"12\",\n    md: \"4\"\n  }), React.createElement(Col, {\n    xs: \"12\",\n    md: \"4\"\n  }), sortItems && sortValue && onSortClick ? React.createElement(Col, {\n    xs: \"12\",\n    md: \"4\"\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-end w-100\"\n  }, React.createElement(\"span\", {\n    className: \"mr-2 text-left font-14\",\n    style: {\n      paddingTop: \"10px\",\n      minWidth: \"60px\"\n    }\n  }, \"Sort By :\"), React.createElement(FormSelect, {\n    containerClassName: \"w-100\",\n    withLabel: false,\n    formId: \"yourFormSortBy\",\n    formName: \"FormSortBy\",\n    formSize: \"sm\",\n    formPlaceholder: \"Sort By\",\n    formOptionData: sortItems,\n    formValue: sortValue,\n    onChange: onSortClick\n  }))) : \"\"), React.createElement(Table, {\n    size: \"sm\",\n    responsive: props.isResponsive ? props.isResponsive : true\n  }, tHead ? React.createElement(\"thead\", null, React.createElement(\"tr\", null, tHead.map(function (data, key) {\n    return React.createElement(\"th\", {\n      key: key,\n      scope: \"col\"\n    }, data);\n  }))) : \"\", noResult ? React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"td\", {\n    className: \"pt-5 pb-2 text-center text-secondary\",\n    colSpan: tHead.length\n  }, \"No Result Found\"))) : React.createElement(\"tbody\", null, children)), pagination ? pagination : \"\");\n});","map":null,"metadata":{},"sourceType":"module"}